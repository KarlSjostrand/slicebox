# Copyright 2017 Lars Edenbrandt
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

slicebox {

	host = "0.0.0.0"
	port = 5000

	session-timeout = 3600s

	ssl {
		ssl-encryption = off

		keystore {
			path = "slicebox.jks"
			password = "slicebox"
		}
	}

	public {
		host = ${slicebox.host}
		port = ${slicebox.port}
		with-ssl = false
	}

	dicom-storage {
		file-system {
			name = "on-disk"
			path = "dicom"
		}
		s3 {
			name = "s3"
			# replace with S3 bucket name
			bucket = "dicom-data.example.com"
			# prefix for objects stored on S3
			prefix = "dicom"
		}
		config = ${slicebox.dicom-storage.file-system}
	}

	database {
		in-memory {
			profile = "slick.jdbc.H2Profile$"
			db {
				url = "jdbc:h2:mem:./slicebox"
				driver = org.h2.Driver
				connectionPool = disabled
				keepAliveConnection = true
			}
		}
		h2 {
			profile = "slick.jdbc.H2Profile$"
			db {
				url = "jdbc:h2:./slicebox"
				driver = org.h2.Driver
				numThreads = 20
				queueSize = 10000
				connectionTimeout = 30000
			}
		}
		mysql {
			profile = "slick.jdbc.MySQLProfile$"
			db {
				url = "jdbc:mysql://localhost:3306/slicebox?useSSL=false"
				driver = com.mysql.jdbc.Driver
				numThreads = 20
				queueSize = 10000
				user = "root"
				connectionTimeout = 30000
			}
		}
		config = ${slicebox.database.h2}
	}

  anonymization {
    purge-empty-keys = false
  }

	superuser {
		user = "admin"
		password = "admin"
	}
}

akka {
	loglevel = DEBUG
	stdout-loglevel = INFO
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
	logger-startup-timeout = 30s
	actor {
		debug {
			# enable function of LoggingReceive, which is to log any received message at DEBUG level
			receive = off
		}
	}
	test {
		timefactor = 1
	}
	io.tcp.windows-connection-abort-workaround-enabled = off
}

akka.http {
	server {
		server-header = "slicebox"
		bind-timeout = 10s
		idle-timeout = 900s
		request-timeout = 600s
		remote-address-header = on
	}
	client {
		user-agent-header = "slicebox"
		connecting-timeout = 60s
		idle-timeout = 900s
	}
	parsing {
		max-content-length = 500m
	}
	host-connection-pool {
		max-retries = 0
	}
}
